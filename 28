当技术的使用在现代社会无所不在，一套共同的特性可以用来现代技术上。许多的作者，如McGinn（1991）和Winston（2003）列了下列一些关键的特性：
复杂度，指大多现今的工具都很难以了解的特性（即需要一连串对制造或使用的事先训练）。一些较相对简单使用，但却相对困难去理解其来源和制造方法，如餐刀、棒球及高加工食品等。另外也有很难使用且很难理解的，如拖拉机、电视、电脑等。
依赖性，指现今工具多依赖著其他的现代工具，而其他的现代工具又依赖着另外的其他现代工具的事实，不论是在制造、使用上面。例如，车子便有一巨大且复杂的制造及维护工业持撑著。而使用也需要有一复杂的公路、街道、高速公路、加油站、保养厂和废弃物收集等设备。
多样性，指相同工具的不同类型和变异。想象存在的众多汤匙和剪刀。即使是更复杂的工具也通常有许多的形状和样式，如建筑起重机或挖掘机。
普及性，规模，指现代技术的普及。简单地说，技术似乎在每一个角落。它支配了现代的生活。另外，规模亦指许多现代技术计划的范围，如手机网络、因特网、飞机航行、通讯卫星及其对地球上人们的影响。libili
仓库1-----FlexibleButton



OTHERS
murphyzhao/CRC8-16
murphyzhao/FlexibleButton
murphyzhao/xpex/blob/master/十六进制转十进制~   /atoi/十六进制转十进制/字节流转换成十六进制/链表等
Sim-szm/db_linklist /双向链表/
ppmarc07/C_DataStructure/链表/队列/链式队列/查表/散列hash/双向链表/单双号链表/kmp算法
https://github.com/tpn/winsdk-10/blob/master/Include/10.0.14393.0/shared/devioctl.h----------------used for windows..devioctl.h
1

https://github.com/hiroi-sora/Umi-OCR/releases
OCR识别
https://softxm.lanzouw.com/b01put4pa 密码:3hda
Umi-OCR开源地址：https://github.com/hiroi-sora/Umi-OCR


下载地址：
https://wwi.lanzouj.com/b01dbu7yh
密码: d5ba

特别说明：
软件使用易语言编译，杀毒软件可能会出现误报误杀等情况，如实在介意，请另选
软件只会修改hosts文件，并不会上传或修改你其他的文件
加速后建议重启浏览器再访问Github

吾爱论坛就不写更新信息了，可以去 Github
欢迎各位来提 issue！
https://github.com/vvmcat/Github-SpeedUpTool


关于打印...宏自定义打印printf可以直接使用
https://blog.csdn.net/xp5xp6/article/details/50527474?readlog
https://blog.csdn.net/xp5xp6/article/details/50527474?locationNum=8&fps=1
https://blog.51cto.com/u_8081755/3353371------------------------这篇写的不错
###################################################example##########################################################
eg.3310.
###################################################start##########################################################
enum
{
    MSG_LVL_NONE,
    MSG_LVL_ERR,
    MSG_LVL_WARN,
    MSG_LVL_INFO,
    MSG_LVL_DBG,
};

//#define MSG_LVL MSG_LVL_WARN	//default
#define MSG_LVL MSG_LVL_DBG

#define SYS_ERR "-E-: "
#define SYS_WARN "-W-: "
#define SYS_INFO "-I-: "
#define SYS_DBG "-D-: "

//#define PRINTF(...) msg_printf("[%s] : %d\n",  __FUNCTION__, __LINE__)
#define PRINTF(...) do {} while(0)
#define MSG(...)    do {} while(0)


//#define PRINTF(...) msg_printf(__VA_ARGS__)
//#define MSG(...)    msg_printf(__VA_ARGS__)
#define printf(...) msg_printf(__VA_ARGS__)
#define MSG_WARN(...) (MSG_LVL < MSG_LVL_WARN) ? (void)0 : msg_printf(SYS_WARN __VA_ARGS__)
#define MSG_INFO(...) (MSG_LVL < MSG_LVL_INFO) ? (void)0 : msg_printf(SYS_INFO __VA_ARGS__)
#define MSG_DBG(...) (MSG_LVL < MSG_LVL_DBG) ? (void)0 : msg_printf(SYS_DBG __VA_ARGS__)
#define MSG_ERR(...) (MSG_LVL < MSG_LVL_DBG) ? (void)0 : msg_printf(SYS_ERR __VA_ARGS__)
###################################################end##########################################################
void msg_printf(char *fmt, ...);
void msg_printf (char * fmt, ... )
{
    va_list args;
//    int n;

    char printbuffer[256];
    va_start ( args, fmt );
//    n = vsprintf ( printbuffer, fmt, args );
    vsprintf ( printbuffer, fmt, args );
    va_end ( args );

    sci_puts_dev((UINT8 *)printbuffer);
}

